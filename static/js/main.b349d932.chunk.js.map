{"version":3,"sources":["components/Table/TableHeader.js","components/Table/TableBody.js","components/Table.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","react_default","a","createElement","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","_this$props","this","Table_TableHeader","Table_TableBody","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","value","setState","defineProperty","submitForm","addCharacter","state","initialState","_this$state","type","id","onChange","App","characters","filter","i","character","concat","toConsumableArray","className","components_Table","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b349d932.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TableHeader = () => {\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        <th>Name</th>\r\n        <th>Job</th>\r\n        <th>Action</th>\r\n      </tr>\r\n    </thead >\r\n  );\r\n};\r\n\r\nexport default TableHeader;","import React from 'react';\r\n\r\nconst TableBody = props => {\r\n  const rows = props.characterData.map((row, index) => {\r\n    return (\r\n      <tr key={index}>\r\n        <td>{row.name}</td>\r\n        <td>{row.job}</td>\r\n        <td><button onClick={() => props.removeCharacter(index)}>Delete</button></td>\r\n      </tr>\r\n    )\r\n  });\r\n  return (\r\n    <tbody>{rows}</tbody>\r\n  );\r\n};\r\n\r\nexport default TableBody;","import React, { Component } from 'react';\r\nimport TableHeader from './Table/TableHeader';\r\nimport TableBody from './Table/TableBody';\r\n\r\nclass Table extends Component {\r\n  render() {\r\n    const { characterData, removeCharacter } = this.props\r\n    return (\r\n      <table>\r\n        <TableHeader />\r\n        <TableBody characterData={characterData}\r\n          removeCharacter={removeCharacter}\r\n          />\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;","import React, { Component } from 'react';\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.initialState = {\r\n      name: '',\r\n      job: ''\r\n    }\r\n    this.state = this.initialState;\r\n  }\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value\r\n    })\r\n  }\r\n\r\n  submitForm = () => {\r\n    this.props.addCharacter(this.state);\r\n    this.setState(this.initialState);\r\n  }\r\n\r\n  render() {\r\n    const { name, job } = this.state;\r\n    return (\r\n      <form>\r\n        <label>Name</label>\r\n        <input type=\"text\" id=\"name\" name=\"name\" value={name} onChange={this.handleChange} />\r\n        <label>Job</label>\r\n        <input type=\"text\" id=\"job\" name=\"job\" value={job} onChange={this.handleChange} />\r\n        <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Table from './components/Table';\nimport Form from './components/Form';\n\nclass App extends Component {\n  state = {\n    characters: [\n      {\n        name: 'Charlie',\n        job: 'Janitor',\n      },\n      {\n        name: 'Mac',\n        job: 'Bouncer',\n      },\n      {\n        name: 'Dee',\n        job: 'Aspring actress',\n      },\n      {\n        name: 'Dennis',\n        job: 'Bartender',\n      },\n    ]\n  };\n\n  removeCharacter = index => {\n    const {characters} = this.state;\n    this.setState({\n      characters: characters.filter((characters, i) => {\n        return index !== i;\n      })\n    })\n  }\n\n  addCharacter = character => {\n    this.setState({characters: [...this.state.characters, character] })\n  }\n\n  render() {\n    const {characters} = this.state;\n    const name = \"Sourabh\";\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n          <h1>Hello {name}!</h1>\n        </div>\n        <div className=\"container\">\n          <Table characterData={characters} removeCharacter = {this.removeCharacter}/>\n          <Form addCharacter = {this.addCharacter}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Table/TableHeader.js","components/Table/TableBody.js","components/Table.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","react_default","a","createElement","TableBody","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editIndex","employee","name","email","index","setState","resetLocalEmployee","field","event","target","value","assign","employeeData","updateEmployee","setEditIndex","_this2","rows","map","row","key","Fragment","id","type","defaultValue","onChange","updateLocalEmployee","onClick","removeEmployee","Component","Table","_this$props","className","Table_TableHeader","Table_TableBody","Form","handleChange","_event$target","defineProperty","submitForm","addEmployee","initialState","_this$state","htmlFor","App","employees","remove","filter","i","add","concat","toConsumableArray","update","prevState","newEmployees","components_Form","components_Table","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ecd916a6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TableHeader = () => {\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        <th>Name</th>\r\n        <th>Email</th>\r\n        <th>Action</th>\r\n      </tr>\r\n    </thead >\r\n  );\r\n};\r\n\r\nexport default TableHeader;","import React, { Component } from 'react';\r\n\r\nclass TableBody extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      editIndex: -1\r\n    };\r\n    this.employee = {\r\n      name: null,\r\n      email: null\r\n    }\r\n  }\r\n\r\n  setEditIndex(index) {\r\n    // performs a shallow merge\r\n    this.setState({ editIndex: index });\r\n    if (index === -1) {\r\n      this.resetLocalEmployee();\r\n    }\r\n  }\r\n\r\n  updateLocalEmployee(field, event, index) {\r\n    if (!field || field === '' || !event.target.value || event.target.value === '') return;\r\n    this.employee = Object.assign({}, this.props.employeeData[index]);\r\n    switch(field) {\r\n      case 'name':\r\n        this.employee.name = event.target.value;\r\n        break;\r\n      case 'email':\r\n        this.employee.email = event.target.value;\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  updateEmployee(index) {\r\n    this.props.updateEmployee(index, this.employee);\r\n    this.setEditIndex(-1);\r\n  }\r\n\r\n  resetLocalEmployee() {\r\n    this.employee = {\r\n      name: null,\r\n      email: null\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const rows = this.props.employeeData.map((row, index) => {\r\n      return (\r\n        <tr key={index}>\r\n          {this.state.editIndex === index ? (\r\n            <>\r\n            <td id={'tdName' + index}><input type=\"text\" id={'name' + index} name={'name' + index}\r\n              defaultValue={row.name} onChange={(event) => this.updateLocalEmployee('name', event, index)} /></td>\r\n            <td id={'tdEmail' + index}><input type=\"email\" id={'email' + index} name={'email' + index}\r\n              defaultValue={row.email} onChange={(event) => this.updateLocalEmployee('email', event, index)}  /></td>\r\n            <td><button onClick={() => this.updateEmployee(index)}>Save</button></td>\r\n            <td><button onClick={() => this.setEditIndex(-1)}>Cancel</button></td>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <td id={'tdName' + index}>{row.name}</td>\r\n              <td id={'tdEmail' + index}>{row.email}</td>\r\n              <td><button onClick={() => this.props.removeEmployee(index)}>Delete</button></td>\r\n              <td><button onClick={() => this.setEditIndex(index)}>Edit</button></td>\r\n            </>\r\n            )\r\n          }\r\n        </tr>\r\n      )\r\n    });\r\n    return (\r\n      <tbody>{rows}</tbody>\r\n    )\r\n  };\r\n};\r\n\r\nexport default TableBody;\r\n","import React, { Component } from 'react';\r\nimport TableHeader from './Table/TableHeader';\r\nimport TableBody from './Table/TableBody';\r\n\r\nclass Table extends Component {\r\n  render() {\r\n    const { employeeData, removeEmployee, updateEmployee } = this.props\r\n    return (\r\n      <div className=\"contain-table\">\r\n        <table>\r\n          <TableHeader />\r\n          <TableBody employeeData={employeeData}\r\n            removeEmployee={removeEmployee}\r\n            updateEmployee={updateEmployee}\r\n          />\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;","import React, { Component } from 'react';\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.initialState = {\r\n      name: '',\r\n      email: ''\r\n    }\r\n    this.state = this.initialState;\r\n  }\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value\r\n    })\r\n  }\r\n\r\n  submitForm = () => {\r\n    this.props.addEmployee(this.state);\r\n    this.setState(this.initialState);\r\n  }\r\n\r\n  render() {\r\n    const { name, email } = this.state;\r\n    return (\r\n      <form className=\"small-container\">\r\n        <label htmlFor=\"name\">Name</label>\r\n        <input type=\"text\" id=\"name\" name=\"name\" value={name} onChange={this.handleChange} />\r\n        <label htmlFor=\"email\">Email</label>\r\n        <input type=\"text\" id=\"email\" name=\"email\" value={email} onChange={this.handleChange} />\r\n        <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Table from './components/Table';\nimport Form from './components/Form';\n\nclass App extends Component {\n  state = {\n    employees: [\n      {\n        name: 'Abraham',\n        email: 'abraham@xyz.com',\n      },\n      {\n        name: 'Bahadur',\n        email: 'bahadur@abc.xyz',\n      },\n      {\n        name: 'Cinderella',\n        email: 'cinderella@xyz.com',\n      },\n      {\n        name: 'Danish',\n        email: 'danish@abc.xyz',\n      },\n    ]\n  };\n\n  remove = index => {\n    const { employees } = this.state;\n    this.setState({\n      employees: employees.filter((employees, i) => {\n        return index !== i;\n      })\n    })\n  }\n\n  add = employee => {\n    this.setState({ employees: [...this.state.employees, employee] })\n  }\n\n  update = (index, employee) => {\n    if (employee.name === '' || employee.email === '') return\n    this.setState(prevState => {\n      const newEmployees = [...prevState.employees];\n      newEmployees[index] = employee\n      return {employees: newEmployees}\n    });\n  }\n\n  render() {\n    const { employees } = this.state;\n    return (\n      <div className=\"small-container\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        <h1 className=\"text-center\">Employees</h1>\n        <div>\n          <Form addEmployee={this.add} />\n          <br/><br/>\n          <Table employeeData={employees} removeEmployee={this.remove} updateEmployee={this.update}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}